[project]
# This is the name of your project. The first time you publish this
# package, this name will be registered for you. It will determine how
# users can install this project, e.g.:
#
# $ pip install sampleproject
#
# And where it will live on PyPI: https://pypi.org/project/sampleproject/
#
# There are some restrictions on what makes a valid project name
# specification here:
# https://packaging.python.org/specifications/core-metadata/#name
name = "nessus-sdk"

# Versions should comply with PEP 440:
# https://www.python.org/dev/peps/pep-0440/
#
# For a discussion on single-sourcing the version, see
# https://packaging.python.org/guides/single-sourcing-package-version/
version = "0.0.1"

# This should be your name or the name of the organization who originally
# authored the project, and a valid email address corresponding to the name
# listed.
authors = [
  {name=":Domai (Tim B.)", email="tim@domai-tb.com"},
]

# This should be your name or the names of the organization who currently
# maintains the project, and a valid email address corresponding to the name
# listed.
maintainers = [
  {name=":Domai (Tim B.)", email="tim@domai-tb.com"},
]

# This is a one-line description or tagline of what your project does. This
# corresponds to the "Summary" metadata field:
# https://packaging.python.org/specifications/core-metadata/#summary
description = "SDK for Tenable Nessus Vulnerability Scanner"

# This field adds keywords for your project which will appear on the
# project page. What does your project relate to?
#
# Note that this is a list of additional keywords, separated
# by commas, to be used to assist searching for the distribution in a
# larger catalog.
keywords = ["nessus", "tenable", "pentest", "vulnerability scan", "scanner"]

# This is an optional longer description of your project that represents
# the body of text which users will see when they visit PyPI.
#
# Often, this is the same as your README, so you can just read it in from
# that file directly (as we have already done above)
#
# This field corresponds to the "Description" metadata field:
# https://packaging.python.org/specifications/core-metadata/#description-optional
readme = "README"

# Specify which Python versions you support. In contrast to the
# 'Programming Language' classifiers above, 'pip install' will check this
# and refuse to install the project if the version does not match. See
# https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires
requires-python = ">=3.8"

# This is either text indicating the license for the distribution, or a file
# that contains the license
# https://packaging.python.org/en/latest/specifications/core-metadata/#license
license = {file = "LICENSE"}

# Classifiers help users find your project by categorizing it.
#
# For a list of valid classifiers, see https://pypi.org/classifiers/
classifiers = [
    # How mature is this project? Common values are
    #   1 - Planning
    #   2 - Pre-Alpha
    #   3 - Alpha
    #   4 - Beta
    #   5 - Production/Stable
    "Development Status :: 1 - Planning",

    # Indicate who your project is intended for
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Information Technology",

    # Specify the Python versions you support here. In particular, ensure
    # that you indicate you support Python 3. These classifiers are *not*
    # checked by "pip install". See instead "python_requires" below.
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.8",

    # Pick your license as you wish
    "License :: OSI Approved :: MIT License",

    # The operation system to run on
    "Operating System :: OS Independent",
]

# This field lists other packages that your project depends on to run.
# Any package you put here will be installed by pip when your project is
# installed, so they must be valid existing projects.
#
# For an analysis of this field vs pip's requirements files see:
# https://packaging.python.org/discussions/install-requires-vs-requirements/
dependencies = [
  "requests",
]

# List additional groups of dependencies here (e.g. development
# dependencies). Users will be able to install these using the "extras"
# syntax, for example:
#
#   $ pip install sampleproject[dev]
#
# Similar to `dependencies` above, these must be valid existing
# projects.
[project.optional-dependencies]
dev = [
  "autoflake",
  "black",
  "build",
  "coverage",
  "flake8",
  "isort",
  "mypy",
  "pre-commit",
  "pytest",
  "pytest-cov",
  "toml",
  "tox",
  "twine",
  "sphinx",
  "sphinx-book-theme",
]

# List URLs that are relevant to your project
#
# This field corresponds to the "Project-URL" and "Home-Page" metadata fields:
# https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use
# https://packaging.python.org/specifications/core-metadata/#home-page-optional
#
# Examples listed include a pattern for specifying where the package tracks
# issues, where the source is hosted, where to say thanks to the package
# maintainers, and where to support the project financially. The key is
# what's used to render the link text on PyPI.
[project.urls]
"Homepage" = "https://github.com/domai-tb/nessus-sdk"
"Source" = "https://github.com/domai-tb/nessus-sdk"
"Bug Tracker" = "https://github.com/domai-tb/nessus-sdk/issues"

# Tool Configuration: autoflake
#
# autoflake removes unused imports and unused variables from Python code.
# It makes use of pyflakes to do this. By default, autoflake only removes unused
# imports for modules that are part of the standard library.
# (Other modules may have side effects that make them unsafe to remove automatically.)
# Removal of unused variables is also disabled by default.
[tool.autoflake]
ignore-init-module-imports = true
in-place = true
recursive = true
remove-all-unused-imports = true
remove-unused-variables = true

# Tool Configuration: isort
#
# isort your imports, so you don't have to.
# isort is a Python utility / library to sort imports alphabetically, and
# automatically separated into sections and by type. It provides a command line
# utility, Python library and plugins for various editors to quickly sort all
# your imports. It requires Python 3.8+ to run but supports formatting
# Python 2 code too.
[tool.isort]
profile = "black"

# Tool Configuration: pytest
#
# The pytest framework makes it easy to write small, readable tests, and can
# scale to support complex functional testing for applications and libraries.
[tool.pytest.ini_options]
addopts = "-ra -v --cov --cov-report term-missing"
minversion = 7.0
pythonpath = ["src"]
testpaths = ["tests"]

[build-system]
# These are the assumed default build requirements from pip:
# https://pip.pypa.io/en/stable/reference/pip/#pep-517-and-518-support
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"
